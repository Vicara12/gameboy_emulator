
#include "cpu.h"
#include "load_instructions.h"
#include "arithmetic_instructions.h"
#include "other_instructions.h"
#include "shift_instructions.h"

void CPU::initInstructionVectors ()
{
/*
 *    CODE FOR INITIATING THE INSTRUCTION_SET VECTOR
 */

instruction_set[0x00] = new NOP();
instruction_set[0x01] = new Number16bitToRegLD(Memory::Register::BC);
instruction_set[0x02] = new NormalLD(Memory::Register::BC, Memory::Register::A);
instruction_set[0x03] = new IncDec16BitAI(Memory::Register::BC, true);
instruction_set[0x04] = new IncAI(Memory::Register::B);
instruction_set[0x05] = new DecAI(Memory::Register::B);
instruction_set[0x06] = new NormalLD(Memory::Register::B, Memory::Register::A, true);
instruction_set[0x07] = new Rotate(false, true, Memory::Register::A, true);
instruction_set[0x08] = new DoubleByteLD(true, false);
instruction_set[0x09] = new Add16BitsAI(Memory::Register::BC);
instruction_set[0x0a] = new NormalLD(Memory::Register::A, Memory::Register::BC);
instruction_set[0x0b] = new IncDec16BitAI(Memory::Register::BC, false);
instruction_set[0x0c] = new IncAI(Memory::Register::C);
instruction_set[0x0d] = new DecAI(Memory::Register::C);
instruction_set[0x0e] = new NormalLD(Memory::Register::C, Memory::Register::A, true);
instruction_set[0x0f] = new Rotate(true, true, Memory::Register::A, true);
instruction_set[0x10] = new Stop();
instruction_set[0x11] = new Number16bitToRegLD(Memory::Register::DE);
instruction_set[0x12] = new NormalLD(Memory::Register::DE, Memory::Register::A);
instruction_set[0x13] = new IncDec16BitAI(Memory::Register::DE, true);
instruction_set[0x14] = new IncAI(Memory::Register::D);
instruction_set[0x15] = new DecAI(Memory::Register::D);
instruction_set[0x16] = new NormalLD(Memory::Register::D, Memory::Register::A, true);
instruction_set[0x17] = new Rotate(false, false, Memory::Register::A, true);
instruction_set[0x18] = new JumpCall(false, true, JumpCall::r8, JumpCall::INCONDITIONAL);
instruction_set[0x19] = new Add16BitsAI(Memory::Register::DE);
instruction_set[0x1a] = new NormalLD(Memory::Register::A, Memory::Register::DE);
instruction_set[0x1b] = new IncDec16BitAI(Memory::Register::DE, false);
instruction_set[0x1c] = new IncAI(Memory::Register::E);
instruction_set[0x1d] = new DecAI(Memory::Register::E);
instruction_set[0x1e] = new NormalLD(Memory::Register::E, Memory::Register::A, true);
instruction_set[0x1f] = new Rotate(true, false, Memory::Register::A, true);
instruction_set[0x20] = new JumpCall(false, true, JumpCall::r8, JumpCall::NZ);
instruction_set[0x21] = new Number16bitToRegLD(Memory::Register::HL);
instruction_set[0x22] = new HLIterateLD(false, true);
instruction_set[0x23] = new IncDec16BitAI(Memory::Register::HL, true);
instruction_set[0x24] = new IncAI(Memory::Register::H);
instruction_set[0x25] = new DecAI(Memory::Register::H);
instruction_set[0x26] = new NormalLD(Memory::Register::H, Memory::Register::A, true);
instruction_set[0x27] = new DecimalAdjustAI();
instruction_set[0x28] = new JumpCall(false, true, JumpCall::r8, JumpCall::Z);
instruction_set[0x29] = new Add16BitsAI(Memory::Register::HL);
instruction_set[0x2a] = new HLIterateLD(true, true);
instruction_set[0x2b] = new IncDec16BitAI(Memory::Register::HL, false);
instruction_set[0x2c] = new IncAI(Memory::Register::L);
instruction_set[0x2d] = new DecAI(Memory::Register::L);
instruction_set[0x2e] = new NormalLD(Memory::Register::L, Memory::Register::A, true);
instruction_set[0x2f] = new CompAAI();
instruction_set[0x30] = new JumpCall(false, true, JumpCall::r8, JumpCall::NC);
instruction_set[0x31] = new Number16bitToRegLD(Memory::Register::SP);
instruction_set[0x32] = new HLIterateLD(false, false);
instruction_set[0x33] = new IncDec16BitAI(Memory::Register::SP, true);
instruction_set[0x34] = new IncAI(Memory::Register::HL);
instruction_set[0x35] = new DecAI(Memory::Register::HL);
instruction_set[0x36] = new NormalLD(Memory::Register::HL, Memory::Register::A, true);
instruction_set[0x37] = new ChangeCFlagAI(false);
instruction_set[0x38] = new JumpCall(false, true, JumpCall::r8, JumpCall::C);
instruction_set[0x39] = new Add16BitsAI(Memory::Register::SP);
instruction_set[0x3a] = new HLIterateLD(true, false);
instruction_set[0x3b] = new IncDec16BitAI(Memory::Register::SP, false);
instruction_set[0x3c] = new IncAI(Memory::Register::A);
instruction_set[0x3d] = new DecAI(Memory::Register::A);
instruction_set[0x3e] = new NormalLD(Memory::Register::A, Memory::Register::A, true);
instruction_set[0x3f] = new ChangeCFlagAI(true);
instruction_set[0x40] = new NormalLD(Memory::Register::B, Memory::Register::B);
instruction_set[0x41] = new NormalLD(Memory::Register::B, Memory::Register::C);
instruction_set[0x42] = new NormalLD(Memory::Register::B, Memory::Register::D);
instruction_set[0x43] = new NormalLD(Memory::Register::B, Memory::Register::E);
instruction_set[0x44] = new NormalLD(Memory::Register::B, Memory::Register::H);
instruction_set[0x45] = new NormalLD(Memory::Register::B, Memory::Register::L);
instruction_set[0x46] = new NormalLD(Memory::Register::B, Memory::Register::HL);
instruction_set[0x47] = new NormalLD(Memory::Register::B, Memory::Register::A);
instruction_set[0x48] = new NormalLD(Memory::Register::C, Memory::Register::B);
instruction_set[0x49] = new NormalLD(Memory::Register::C, Memory::Register::C);
instruction_set[0x4a] = new NormalLD(Memory::Register::C, Memory::Register::D);
instruction_set[0x4b] = new NormalLD(Memory::Register::C, Memory::Register::E);
instruction_set[0x4c] = new NormalLD(Memory::Register::C, Memory::Register::H);
instruction_set[0x4d] = new NormalLD(Memory::Register::C, Memory::Register::L);
instruction_set[0x4e] = new NormalLD(Memory::Register::C, Memory::Register::HL);
instruction_set[0x4f] = new NormalLD(Memory::Register::C, Memory::Register::A);
instruction_set[0x50] = new NormalLD(Memory::Register::D, Memory::Register::B);
instruction_set[0x51] = new NormalLD(Memory::Register::D, Memory::Register::C);
instruction_set[0x52] = new NormalLD(Memory::Register::D, Memory::Register::D);
instruction_set[0x53] = new NormalLD(Memory::Register::D, Memory::Register::E);
instruction_set[0x54] = new NormalLD(Memory::Register::D, Memory::Register::H);
instruction_set[0x55] = new NormalLD(Memory::Register::D, Memory::Register::L);
instruction_set[0x56] = new NormalLD(Memory::Register::D, Memory::Register::HL);
instruction_set[0x57] = new NormalLD(Memory::Register::D, Memory::Register::A);
instruction_set[0x58] = new NormalLD(Memory::Register::E, Memory::Register::B);
instruction_set[0x59] = new NormalLD(Memory::Register::E, Memory::Register::C);
instruction_set[0x5a] = new NormalLD(Memory::Register::E, Memory::Register::D);
instruction_set[0x5b] = new NormalLD(Memory::Register::E, Memory::Register::E);
instruction_set[0x5c] = new NormalLD(Memory::Register::E, Memory::Register::H);
instruction_set[0x5d] = new NormalLD(Memory::Register::E, Memory::Register::L);
instruction_set[0x5e] = new NormalLD(Memory::Register::E, Memory::Register::HL);
instruction_set[0x5f] = new NormalLD(Memory::Register::E, Memory::Register::A);
instruction_set[0x60] = new NormalLD(Memory::Register::H, Memory::Register::B);
instruction_set[0x61] = new NormalLD(Memory::Register::H, Memory::Register::C);
instruction_set[0x62] = new NormalLD(Memory::Register::H, Memory::Register::D);
instruction_set[0x63] = new NormalLD(Memory::Register::H, Memory::Register::E);
instruction_set[0x64] = new NormalLD(Memory::Register::H, Memory::Register::H);
instruction_set[0x65] = new NormalLD(Memory::Register::H, Memory::Register::L);
instruction_set[0x66] = new NormalLD(Memory::Register::H, Memory::Register::HL);
instruction_set[0x67] = new NormalLD(Memory::Register::H, Memory::Register::A);
instruction_set[0x68] = new NormalLD(Memory::Register::L, Memory::Register::B);
instruction_set[0x69] = new NormalLD(Memory::Register::L, Memory::Register::C);
instruction_set[0x6a] = new NormalLD(Memory::Register::L, Memory::Register::D);
instruction_set[0x6b] = new NormalLD(Memory::Register::L, Memory::Register::E);
instruction_set[0x6c] = new NormalLD(Memory::Register::L, Memory::Register::H);
instruction_set[0x6d] = new NormalLD(Memory::Register::L, Memory::Register::L);
instruction_set[0x6e] = new NormalLD(Memory::Register::L, Memory::Register::HL);
instruction_set[0x6f] = new NormalLD(Memory::Register::L, Memory::Register::A);
instruction_set[0x70] = new NormalLD(Memory::Register::HL, Memory::Register::B);
instruction_set[0x71] = new NormalLD(Memory::Register::HL, Memory::Register::C);
instruction_set[0x72] = new NormalLD(Memory::Register::HL, Memory::Register::D);
instruction_set[0x73] = new NormalLD(Memory::Register::HL, Memory::Register::E);
instruction_set[0x74] = new NormalLD(Memory::Register::HL, Memory::Register::H);
instruction_set[0x75] = new NormalLD(Memory::Register::HL, Memory::Register::L);
instruction_set[0x76] = new Halt();
instruction_set[0x77] = new NormalLD(Memory::Register::HL, Memory::Register::A);
instruction_set[0x78] = new NormalLD(Memory::Register::A, Memory::Register::B);
instruction_set[0x79] = new NormalLD(Memory::Register::A, Memory::Register::C);
instruction_set[0x7a] = new NormalLD(Memory::Register::A, Memory::Register::D);
instruction_set[0x7b] = new NormalLD(Memory::Register::A, Memory::Register::E);
instruction_set[0x7c] = new NormalLD(Memory::Register::A, Memory::Register::H);
instruction_set[0x7d] = new NormalLD(Memory::Register::A, Memory::Register::L);
instruction_set[0x7e] = new NormalLD(Memory::Register::A, Memory::Register::HL);
instruction_set[0x7f] = new NormalLD(Memory::Register::A, Memory::Register::A);
instruction_set[0x80] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::ADD, true);
instruction_set[0x81] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::ADD, true);
instruction_set[0x82] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::ADD, true);
instruction_set[0x83] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::ADD, true);
instruction_set[0x84] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::ADD, true);
instruction_set[0x85] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::ADD, true);
instruction_set[0x86] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::ADD, true);
instruction_set[0x87] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::ADD, true);
instruction_set[0x88] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::ADC, true);
instruction_set[0x89] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::ADC, true);
instruction_set[0x8a] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::ADC, true);
instruction_set[0x8b] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::ADC, true);
instruction_set[0x8c] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::ADC, true);
instruction_set[0x8d] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::ADC, true);
instruction_set[0x8e] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::ADC, true);
instruction_set[0x8f] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::ADC, true);
instruction_set[0x90] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::SUB, true);
instruction_set[0x91] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::SUB, true);
instruction_set[0x92] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::SUB, true);
instruction_set[0x93] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::SUB, true);
instruction_set[0x94] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::SUB, true);
instruction_set[0x95] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::SUB, true);
instruction_set[0x96] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::SUB, true);
instruction_set[0x97] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::SUB, true);
instruction_set[0x98] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::SBC, true);
instruction_set[0x99] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::SBC, true);
instruction_set[0x9a] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::SBC, true);
instruction_set[0x9b] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::SBC, true);
instruction_set[0x9c] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::SBC, true);
instruction_set[0x9d] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::SBC, true);
instruction_set[0x9e] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::SBC, true);
instruction_set[0x9f] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::SBC, true);
instruction_set[0xa0] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::AND, true);
instruction_set[0xa1] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::AND, true);
instruction_set[0xa2] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::AND, true);
instruction_set[0xa3] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::AND, true);
instruction_set[0xa4] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::AND, true);
instruction_set[0xa5] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::AND, true);
instruction_set[0xa6] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::AND, true);
instruction_set[0xa7] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::AND, true);
instruction_set[0xa8] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::XOR, true);
instruction_set[0xa9] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::XOR, true);
instruction_set[0xaa] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::XOR, true);
instruction_set[0xab] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::XOR, true);
instruction_set[0xac] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::XOR, true);
instruction_set[0xad] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::XOR, true);
instruction_set[0xae] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::XOR, true);
instruction_set[0xaf] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::XOR, true);
instruction_set[0xb0] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::OR, true);
instruction_set[0xb1] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::OR, true);
instruction_set[0xb2] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::OR, true);
instruction_set[0xb3] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::OR, true);
instruction_set[0xb4] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::OR, true);
instruction_set[0xb5] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::OR, true);
instruction_set[0xb6] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::OR, true);
instruction_set[0xb7] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::OR, true);
instruction_set[0xb8] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::CP, true);
instruction_set[0xb9] = new ArithmeticOperationAI(Memory::Register::C, ArithmeticOperationAI::CP, true);
instruction_set[0xba] = new ArithmeticOperationAI(Memory::Register::D, ArithmeticOperationAI::CP, true);
instruction_set[0xbb] = new ArithmeticOperationAI(Memory::Register::E, ArithmeticOperationAI::CP, true);
instruction_set[0xbc] = new ArithmeticOperationAI(Memory::Register::H, ArithmeticOperationAI::CP, true);
instruction_set[0xbd] = new ArithmeticOperationAI(Memory::Register::L, ArithmeticOperationAI::CP, true);
instruction_set[0xbe] = new ArithmeticOperationAI(Memory::Register::HL, ArithmeticOperationAI::CP, true);
instruction_set[0xbf] = new ArithmeticOperationAI(Memory::Register::A, ArithmeticOperationAI::CP, true);
instruction_set[0xc0] = new Return(false, Return::Source::SP, Return::Type::NZ);
instruction_set[0xc1] = new PopLD(Memory::Register::BC);
instruction_set[0xc2] = new JumpCall(false, false, JumpCall::a16, JumpCall::NZ);
instruction_set[0xc3] = new JumpCall(false, false, JumpCall::a16, JumpCall::INCONDITIONAL);
instruction_set[0xc4] = new JumpCall(true, false, JumpCall::a16, JumpCall::NZ);
instruction_set[0xc5] = new PushLD(Memory::Register::BC);
instruction_set[0xc6] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::ADD, false);
instruction_set[0xc7] = new Return(false, Return::Source::_00H, Return::Type::INCONDITIONAL);
instruction_set[0xc8] = new Return(false, Return::Source::SP, Return::Type::Z);
instruction_set[0xc9] = new Return(false, Return::Source::SP, Return::Type::INCONDITIONAL);
instruction_set[0xca] = new JumpCall(false, false, JumpCall::a16, JumpCall::Z);
instruction_set[0xcb] = new InvalidInstruction();
instruction_set[0xcc] = new JumpCall(true, false, JumpCall::a16, JumpCall::Z);
instruction_set[0xcd] = new JumpCall(true, false, JumpCall::a16, JumpCall::INCONDITIONAL);
instruction_set[0xce] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::ADC, false);
instruction_set[0xcf] = new Return(false, Return::Source::_08H, Return::Type::INCONDITIONAL);
instruction_set[0xd0] = new Return(false, Return::Source::SP, Return::Type::NC);
instruction_set[0xd1] = new PopLD(Memory::Register::DE);
instruction_set[0xd2] = new JumpCall(false, false, JumpCall::a16, JumpCall::NC);
instruction_set[0xd3] = new InvalidInstruction();
instruction_set[0xd4] = new JumpCall(true, false, JumpCall::a16, JumpCall::NC);
instruction_set[0xd5] = new PushLD(Memory::Register::DE);
instruction_set[0xd6] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::SUB, false);
instruction_set[0xd7] = new Return(false, Return::Source::_10H, Return::Type::INCONDITIONAL);
instruction_set[0xd8] = new Return(false, Return::Source::SP, Return::Type::C);
instruction_set[0xd9] = new Return(true, Return::Source::SP, Return::Type::INCONDITIONAL);
instruction_set[0xda] = new JumpCall(false, false, JumpCall::a16, JumpCall::C);
instruction_set[0xdb] = new InvalidInstruction();
instruction_set[0xdc] = new JumpCall(true, false, JumpCall::a16, JumpCall::C);
instruction_set[0xdd] = new InvalidInstruction();
instruction_set[0xde] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::SBC, false);
instruction_set[0xdf] = new Return(false, Return::Source::_18H, Return::Type::INCONDITIONAL);
instruction_set[0xe0] = new FF00LD(true, false);
instruction_set[0xe1] = new PopLD(Memory::Register::HL);
instruction_set[0xe2] = new FF00LD(true, true);
instruction_set[0xe3] = new InvalidInstruction();
instruction_set[0xe4] = new InvalidInstruction();
instruction_set[0xe5] = new PushLD(Memory::Register::HL);
instruction_set[0xe6] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::AND, false);
instruction_set[0xe7] = new Return(false, Return::Source::_20H, Return::Type::INCONDITIONAL);
instruction_set[0xe8] = new ADDr8SPAI();
instruction_set[0xe9] = new JumpCall(false, false, JumpCall::Source::HL, JumpCall::Type::INCONDITIONAL);
instruction_set[0xea] = new DoubleByteLD(true);
instruction_set[0xeb] = new InvalidInstruction();
instruction_set[0xec] = new InvalidInstruction();
instruction_set[0xed] = new InvalidInstruction();
instruction_set[0xee] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::XOR, false);
instruction_set[0xef] = new Return(false, Return::Source::_28H, Return::Type::INCONDITIONAL);
instruction_set[0xf0] = new FF00LD(false, false);
instruction_set[0xf1] = new PopLD(Memory::Register::AF);
instruction_set[0xf2] = new FF00LD(false, true);
instruction_set[0xf3] = new InterruptionED(false);
instruction_set[0xf4] = new InvalidInstruction();
instruction_set[0xf5] = new PushLD(Memory::Register::AF);
instruction_set[0xf6] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::OR, false);
instruction_set[0xf7] = new Return(false, Return::Source::_30H, Return::Type::INCONDITIONAL);
instruction_set[0xf8] = new InstructionF8LD();
instruction_set[0xf9] = new NormalLD(Memory::Register::SP, Memory::Register::HL);
instruction_set[0xfa] = new DoubleByteLD(false);
instruction_set[0xfb] = new InterruptionED(true);
instruction_set[0xfc] = new InvalidInstruction();
instruction_set[0xfd] = new InvalidInstruction();
instruction_set[0xfe] = new ArithmeticOperationAI(Memory::Register::B, ArithmeticOperationAI::CP, false);
instruction_set[0xff] = new Return(false, Return::Source::_38H, Return::Type::INCONDITIONAL);




/*
 *    CODE FOR INITIATING THE INSTRUCTION_SET VECTOR
 */

CB_subset[0x00] = new Rotate(false, true, Memory::Register::B, false);
CB_subset[0x01] = new Rotate(false, true, Memory::Register::C, false);
CB_subset[0x02] = new Rotate(false, true, Memory::Register::D, false);
CB_subset[0x03] = new Rotate(false, true, Memory::Register::E, false);
CB_subset[0x04] = new Rotate(false, true, Memory::Register::H, false);
CB_subset[0x05] = new Rotate(false, true, Memory::Register::L, false);
CB_subset[0x06] = new Rotate(false, true, Memory::Register::HL, false);
CB_subset[0x07] = new Rotate(false, true, Memory::Register::A, false);
CB_subset[0x08] = new Rotate(true, true, Memory::Register::B, false);
CB_subset[0x09] = new Rotate(true, true, Memory::Register::C, false);
CB_subset[0x0a] = new Rotate(true, true, Memory::Register::D, false);
CB_subset[0x0b] = new Rotate(true, true, Memory::Register::E, false);
CB_subset[0x0c] = new Rotate(true, true, Memory::Register::H, false);
CB_subset[0x0d] = new Rotate(true, true, Memory::Register::L, false);
CB_subset[0x0e] = new Rotate(true, true, Memory::Register::HL, false);
CB_subset[0x0f] = new Rotate(true, true, Memory::Register::A, false);
CB_subset[0x10] = new Rotate(false, false, Memory::Register::B, false);
CB_subset[0x11] = new Rotate(false, false, Memory::Register::C, false);
CB_subset[0x12] = new Rotate(false, false, Memory::Register::D, false);
CB_subset[0x13] = new Rotate(false, false, Memory::Register::E, false);
CB_subset[0x14] = new Rotate(false, false, Memory::Register::H, false);
CB_subset[0x15] = new Rotate(false, false, Memory::Register::L, false);
CB_subset[0x16] = new Rotate(false, false, Memory::Register::HL, false);
CB_subset[0x17] = new Rotate(false, false, Memory::Register::A, false);
CB_subset[0x18] = new Rotate(true, false, Memory::Register::B, false);
CB_subset[0x19] = new Rotate(true, false, Memory::Register::C, false);
CB_subset[0x1a] = new Rotate(true, false, Memory::Register::D, false);
CB_subset[0x1b] = new Rotate(true, false, Memory::Register::E, false);
CB_subset[0x1c] = new Rotate(true, false, Memory::Register::H, false);
CB_subset[0x1d] = new Rotate(true, false, Memory::Register::L, false);
CB_subset[0x1e] = new Rotate(true, false, Memory::Register::HL, false);
CB_subset[0x1f] = new Rotate(true, false, Memory::Register::A, false);
CB_subset[0x20] = new Shift(false, Memory::Register::B, false);
CB_subset[0x21] = new Shift(false, Memory::Register::C, false);
CB_subset[0x22] = new Shift(false, Memory::Register::D, false);
CB_subset[0x23] = new Shift(false, Memory::Register::E, false);
CB_subset[0x24] = new Shift(false, Memory::Register::H, false);
CB_subset[0x25] = new Shift(false, Memory::Register::L, false);
CB_subset[0x26] = new Shift(false, Memory::Register::HL, false);
CB_subset[0x27] = new Shift(false, Memory::Register::A, false);
CB_subset[0x28] = new Shift(true, Memory::Register::B, false);
CB_subset[0x29] = new Shift(true, Memory::Register::C, false);
CB_subset[0x2a] = new Shift(true, Memory::Register::D, false);
CB_subset[0x2b] = new Shift(true, Memory::Register::E, false);
CB_subset[0x2c] = new Shift(true, Memory::Register::H, false);
CB_subset[0x2d] = new Shift(true, Memory::Register::L, false);
CB_subset[0x2e] = new Shift(true, Memory::Register::HL, false);
CB_subset[0x2f] = new Shift(true, Memory::Register::A, false);
CB_subset[0x30] = new Swap(Memory::Register::B);
CB_subset[0x31] = new Swap(Memory::Register::C);
CB_subset[0x32] = new Swap(Memory::Register::D);
CB_subset[0x33] = new Swap(Memory::Register::E);
CB_subset[0x34] = new Swap(Memory::Register::H);
CB_subset[0x35] = new Swap(Memory::Register::L);
CB_subset[0x36] = new Swap(Memory::Register::HL);
CB_subset[0x37] = new Swap(Memory::Register::A);
CB_subset[0x38] = new Shift(true, Memory::Register::B, true);
CB_subset[0x39] = new Shift(true, Memory::Register::C, true);
CB_subset[0x3a] = new Shift(true, Memory::Register::D, true);
CB_subset[0x3b] = new Shift(true, Memory::Register::E, true);
CB_subset[0x3c] = new Shift(true, Memory::Register::H, true);
CB_subset[0x3d] = new Shift(true, Memory::Register::L, true);
CB_subset[0x3e] = new Shift(true, Memory::Register::HL, true);
CB_subset[0x3f] = new Shift(true, Memory::Register::A, true);
CB_subset[0x40] = new Bit(Memory::Register::B, 0);
CB_subset[0x41] = new Bit(Memory::Register::C, 0);
CB_subset[0x42] = new Bit(Memory::Register::D, 0);
CB_subset[0x43] = new Bit(Memory::Register::E, 0);
CB_subset[0x44] = new Bit(Memory::Register::H, 0);
CB_subset[0x45] = new Bit(Memory::Register::L, 0);
CB_subset[0x46] = new Bit(Memory::Register::HL, 0);
CB_subset[0x47] = new Bit(Memory::Register::A, 0);
CB_subset[0x48] = new Bit(Memory::Register::B, 1);
CB_subset[0x49] = new Bit(Memory::Register::C, 1);
CB_subset[0x4a] = new Bit(Memory::Register::D, 1);
CB_subset[0x4b] = new Bit(Memory::Register::E, 1);
CB_subset[0x4c] = new Bit(Memory::Register::H, 1);
CB_subset[0x4d] = new Bit(Memory::Register::L, 1);
CB_subset[0x4e] = new Bit(Memory::Register::HL, 1);
CB_subset[0x4f] = new Bit(Memory::Register::A, 1);
CB_subset[0x50] = new Bit(Memory::Register::B, 2);
CB_subset[0x51] = new Bit(Memory::Register::C, 2);
CB_subset[0x52] = new Bit(Memory::Register::D, 2);
CB_subset[0x53] = new Bit(Memory::Register::E, 2);
CB_subset[0x54] = new Bit(Memory::Register::H, 2);
CB_subset[0x55] = new Bit(Memory::Register::L, 2);
CB_subset[0x56] = new Bit(Memory::Register::HL, 2);
CB_subset[0x57] = new Bit(Memory::Register::A, 2);
CB_subset[0x58] = new Bit(Memory::Register::B, 3);
CB_subset[0x59] = new Bit(Memory::Register::C, 3);
CB_subset[0x5a] = new Bit(Memory::Register::D, 3);
CB_subset[0x5b] = new Bit(Memory::Register::E, 3);
CB_subset[0x5c] = new Bit(Memory::Register::H, 3);
CB_subset[0x5d] = new Bit(Memory::Register::L, 3);
CB_subset[0x5e] = new Bit(Memory::Register::HL, 3);
CB_subset[0x5f] = new Bit(Memory::Register::A, 3);
CB_subset[0x60] = new Bit(Memory::Register::B, 4);
CB_subset[0x61] = new Bit(Memory::Register::C, 4);
CB_subset[0x62] = new Bit(Memory::Register::D, 4);
CB_subset[0x63] = new Bit(Memory::Register::E, 4);
CB_subset[0x64] = new Bit(Memory::Register::H, 4);
CB_subset[0x65] = new Bit(Memory::Register::L, 4);
CB_subset[0x66] = new Bit(Memory::Register::HL, 4);
CB_subset[0x67] = new Bit(Memory::Register::A, 4);
CB_subset[0x68] = new Bit(Memory::Register::B, 5);
CB_subset[0x69] = new Bit(Memory::Register::C, 5);
CB_subset[0x6a] = new Bit(Memory::Register::D, 5);
CB_subset[0x6b] = new Bit(Memory::Register::E, 5);
CB_subset[0x6c] = new Bit(Memory::Register::H, 5);
CB_subset[0x6d] = new Bit(Memory::Register::L, 5);
CB_subset[0x6e] = new Bit(Memory::Register::HL, 5);
CB_subset[0x6f] = new Bit(Memory::Register::A, 5);
CB_subset[0x70] = new Bit(Memory::Register::B, 6);
CB_subset[0x71] = new Bit(Memory::Register::C, 6);
CB_subset[0x72] = new Bit(Memory::Register::D, 6);
CB_subset[0x73] = new Bit(Memory::Register::E, 6);
CB_subset[0x74] = new Bit(Memory::Register::H, 6);
CB_subset[0x75] = new Bit(Memory::Register::L, 6);
CB_subset[0x76] = new Bit(Memory::Register::HL, 6);
CB_subset[0x77] = new Bit(Memory::Register::A, 6);
CB_subset[0x78] = new Bit(Memory::Register::B, 7);
CB_subset[0x79] = new Bit(Memory::Register::C, 7);
CB_subset[0x7a] = new Bit(Memory::Register::D, 7);
CB_subset[0x7b] = new Bit(Memory::Register::E, 7);
CB_subset[0x7c] = new Bit(Memory::Register::H, 7);
CB_subset[0x7d] = new Bit(Memory::Register::L, 7);
CB_subset[0x7e] = new Bit(Memory::Register::HL, 7);
CB_subset[0x7f] = new Bit(Memory::Register::A, 7);
CB_subset[0x80] = new SetResetBit(Memory::Register::B, 0, false);
CB_subset[0x81] = new SetResetBit(Memory::Register::C, 0, false);
CB_subset[0x82] = new SetResetBit(Memory::Register::D, 0, false);
CB_subset[0x83] = new SetResetBit(Memory::Register::E, 0, false);
CB_subset[0x84] = new SetResetBit(Memory::Register::H, 0, false);
CB_subset[0x85] = new SetResetBit(Memory::Register::L, 0, false);
CB_subset[0x86] = new SetResetBit(Memory::Register::HL, 0, false);
CB_subset[0x87] = new SetResetBit(Memory::Register::A, 0, false);
CB_subset[0x88] = new SetResetBit(Memory::Register::B, 1, false);
CB_subset[0x89] = new SetResetBit(Memory::Register::C, 1, false);
CB_subset[0x8a] = new SetResetBit(Memory::Register::D, 1, false);
CB_subset[0x8b] = new SetResetBit(Memory::Register::E, 1, false);
CB_subset[0x8c] = new SetResetBit(Memory::Register::H, 1, false);
CB_subset[0x8d] = new SetResetBit(Memory::Register::L, 1, false);
CB_subset[0x8e] = new SetResetBit(Memory::Register::HL, 1, false);
CB_subset[0x8f] = new SetResetBit(Memory::Register::A, 1, false);
CB_subset[0x90] = new SetResetBit(Memory::Register::B, 2, false);
CB_subset[0x91] = new SetResetBit(Memory::Register::C, 2, false);
CB_subset[0x92] = new SetResetBit(Memory::Register::D, 2, false);
CB_subset[0x93] = new SetResetBit(Memory::Register::E, 2, false);
CB_subset[0x94] = new SetResetBit(Memory::Register::H, 2, false);
CB_subset[0x95] = new SetResetBit(Memory::Register::L, 2, false);
CB_subset[0x96] = new SetResetBit(Memory::Register::HL, 2, false);
CB_subset[0x97] = new SetResetBit(Memory::Register::A, 2, false);
CB_subset[0x98] = new SetResetBit(Memory::Register::B, 3, false);
CB_subset[0x99] = new SetResetBit(Memory::Register::C, 3, false);
CB_subset[0x9a] = new SetResetBit(Memory::Register::D, 3, false);
CB_subset[0x9b] = new SetResetBit(Memory::Register::E, 3, false);
CB_subset[0x9c] = new SetResetBit(Memory::Register::H, 3, false);
CB_subset[0x9d] = new SetResetBit(Memory::Register::L, 3, false);
CB_subset[0x9e] = new SetResetBit(Memory::Register::HL, 3, false);
CB_subset[0x9f] = new SetResetBit(Memory::Register::A, 3, false);
CB_subset[0xa0] = new SetResetBit(Memory::Register::B, 4, false);
CB_subset[0xa1] = new SetResetBit(Memory::Register::C, 4, false);
CB_subset[0xa2] = new SetResetBit(Memory::Register::D, 4, false);
CB_subset[0xa3] = new SetResetBit(Memory::Register::E, 4, false);
CB_subset[0xa4] = new SetResetBit(Memory::Register::H, 4, false);
CB_subset[0xa5] = new SetResetBit(Memory::Register::L, 4, false);
CB_subset[0xa6] = new SetResetBit(Memory::Register::HL, 4, false);
CB_subset[0xa7] = new SetResetBit(Memory::Register::A, 4, false);
CB_subset[0xa8] = new SetResetBit(Memory::Register::B, 5, false);
CB_subset[0xa9] = new SetResetBit(Memory::Register::C, 5, false);
CB_subset[0xaa] = new SetResetBit(Memory::Register::D, 5, false);
CB_subset[0xab] = new SetResetBit(Memory::Register::E, 5, false);
CB_subset[0xac] = new SetResetBit(Memory::Register::H, 5, false);
CB_subset[0xad] = new SetResetBit(Memory::Register::L, 5, false);
CB_subset[0xae] = new SetResetBit(Memory::Register::HL, 5, false);
CB_subset[0xaf] = new SetResetBit(Memory::Register::A, 5, false);
CB_subset[0xb0] = new SetResetBit(Memory::Register::B, 6, false);
CB_subset[0xb1] = new SetResetBit(Memory::Register::C, 6, false);
CB_subset[0xb2] = new SetResetBit(Memory::Register::D, 6, false);
CB_subset[0xb3] = new SetResetBit(Memory::Register::E, 6, false);
CB_subset[0xb4] = new SetResetBit(Memory::Register::H, 6, false);
CB_subset[0xb5] = new SetResetBit(Memory::Register::L, 6, false);
CB_subset[0xb6] = new SetResetBit(Memory::Register::HL, 6, false);
CB_subset[0xb7] = new SetResetBit(Memory::Register::A, 6, false);
CB_subset[0xb8] = new SetResetBit(Memory::Register::B, 7, false);
CB_subset[0xb9] = new SetResetBit(Memory::Register::C, 7, false);
CB_subset[0xba] = new SetResetBit(Memory::Register::D, 7, false);
CB_subset[0xbb] = new SetResetBit(Memory::Register::E, 7, false);
CB_subset[0xbc] = new SetResetBit(Memory::Register::H, 7, false);
CB_subset[0xbd] = new SetResetBit(Memory::Register::L, 7, false);
CB_subset[0xbe] = new SetResetBit(Memory::Register::HL, 7, false);
CB_subset[0xbf] = new SetResetBit(Memory::Register::A, 7, false);
CB_subset[0xc0] = new SetResetBit(Memory::Register::B, 0, true);
CB_subset[0xc1] = new SetResetBit(Memory::Register::C, 0, true);
CB_subset[0xc2] = new SetResetBit(Memory::Register::D, 0, true);
CB_subset[0xc3] = new SetResetBit(Memory::Register::E, 0, true);
CB_subset[0xc4] = new SetResetBit(Memory::Register::H, 0, true);
CB_subset[0xc5] = new SetResetBit(Memory::Register::L, 0, true);
CB_subset[0xc6] = new SetResetBit(Memory::Register::HL, 0, true);
CB_subset[0xc7] = new SetResetBit(Memory::Register::A, 0, true);
CB_subset[0xc8] = new SetResetBit(Memory::Register::B, 1, true);
CB_subset[0xc9] = new SetResetBit(Memory::Register::C, 1, true);
CB_subset[0xca] = new SetResetBit(Memory::Register::D, 1, true);
CB_subset[0xcb] = new SetResetBit(Memory::Register::E, 1, true);
CB_subset[0xcc] = new SetResetBit(Memory::Register::H, 1, true);
CB_subset[0xcd] = new SetResetBit(Memory::Register::L, 1, true);
CB_subset[0xce] = new SetResetBit(Memory::Register::HL, 1, true);
CB_subset[0xcf] = new SetResetBit(Memory::Register::A, 1, true);
CB_subset[0xd0] = new SetResetBit(Memory::Register::B, 2, true);
CB_subset[0xd1] = new SetResetBit(Memory::Register::C, 2, true);
CB_subset[0xd2] = new SetResetBit(Memory::Register::D, 2, true);
CB_subset[0xd3] = new SetResetBit(Memory::Register::E, 2, true);
CB_subset[0xd4] = new SetResetBit(Memory::Register::H, 2, true);
CB_subset[0xd5] = new SetResetBit(Memory::Register::L, 2, true);
CB_subset[0xd6] = new SetResetBit(Memory::Register::HL, 2, true);
CB_subset[0xd7] = new SetResetBit(Memory::Register::A, 2, true);
CB_subset[0xd8] = new SetResetBit(Memory::Register::B, 3, true);
CB_subset[0xd9] = new SetResetBit(Memory::Register::C, 3, true);
CB_subset[0xda] = new SetResetBit(Memory::Register::D, 3, true);
CB_subset[0xdb] = new SetResetBit(Memory::Register::E, 3, true);
CB_subset[0xdc] = new SetResetBit(Memory::Register::H, 3, true);
CB_subset[0xdd] = new SetResetBit(Memory::Register::L, 3, true);
CB_subset[0xde] = new SetResetBit(Memory::Register::HL, 3, true);
CB_subset[0xdf] = new SetResetBit(Memory::Register::A, 3, true);
CB_subset[0xe0] = new SetResetBit(Memory::Register::B, 4, true);
CB_subset[0xe1] = new SetResetBit(Memory::Register::C, 4, true);
CB_subset[0xe2] = new SetResetBit(Memory::Register::D, 4, true);
CB_subset[0xe3] = new SetResetBit(Memory::Register::E, 4, true);
CB_subset[0xe4] = new SetResetBit(Memory::Register::H, 4, true);
CB_subset[0xe5] = new SetResetBit(Memory::Register::L, 4, true);
CB_subset[0xe6] = new SetResetBit(Memory::Register::HL, 4, true);
CB_subset[0xe7] = new SetResetBit(Memory::Register::A, 4, true);
CB_subset[0xe8] = new SetResetBit(Memory::Register::B, 5, true);
CB_subset[0xe9] = new SetResetBit(Memory::Register::C, 5, true);
CB_subset[0xea] = new SetResetBit(Memory::Register::D, 5, true);
CB_subset[0xeb] = new SetResetBit(Memory::Register::E, 5, true);
CB_subset[0xec] = new SetResetBit(Memory::Register::H, 5, true);
CB_subset[0xed] = new SetResetBit(Memory::Register::L, 5, true);
CB_subset[0xee] = new SetResetBit(Memory::Register::HL, 5, true);
CB_subset[0xef] = new SetResetBit(Memory::Register::A, 5, true);
CB_subset[0xf0] = new SetResetBit(Memory::Register::B, 6, true);
CB_subset[0xf1] = new SetResetBit(Memory::Register::C, 6, true);
CB_subset[0xf2] = new SetResetBit(Memory::Register::D, 6, true);
CB_subset[0xf3] = new SetResetBit(Memory::Register::E, 6, true);
CB_subset[0xf4] = new SetResetBit(Memory::Register::H, 6, true);
CB_subset[0xf5] = new SetResetBit(Memory::Register::L, 6, true);
CB_subset[0xf6] = new SetResetBit(Memory::Register::HL, 6, true);
CB_subset[0xf7] = new SetResetBit(Memory::Register::A, 6, true);
CB_subset[0xf8] = new SetResetBit(Memory::Register::B, 7, true);
CB_subset[0xf9] = new SetResetBit(Memory::Register::C, 7, true);
CB_subset[0xfa] = new SetResetBit(Memory::Register::D, 7, true);
CB_subset[0xfb] = new SetResetBit(Memory::Register::E, 7, true);
CB_subset[0xfc] = new SetResetBit(Memory::Register::H, 7, true);
CB_subset[0xfd] = new SetResetBit(Memory::Register::L, 7, true);
CB_subset[0xfe] = new SetResetBit(Memory::Register::HL, 7, true);
CB_subset[0xff] = new SetResetBit(Memory::Register::A, 7, true);

}